import uuid
from typing import Callable

from fastapi import Request, Response
from loguru import logger
from starlette.middleware.base import BaseHTTPMiddleware

from ..factory import get_data_sanitizer
from .context import RequestContextLogger


class RequestTrackingMiddleware(BaseHTTPMiddleware):
    """Middleware to track and log incoming HTTP requests.

    Generates a unique request ID, log essential request information
    (like client IP, user agent, method, path, query parameters, and safe headers),
    and integrates with the `RequestContextLogger` to ensure all logs during the request
    lifecycle include this contextual data.
    Sanitizes sensitive information before logging.
    """

    def __init__(self, app):
        """Initializes the RequestTrackingMiddleware.

        Args:
            app: The FastAPI application instance.
        """
        super().__init__(app)

    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        """Dispatch the incoming request, add tracking and logging.

        Generates a request ID, gathers request details, sanitizes sensitive data,
        sets up the request context for logging, processes the request through the
        next middleware/route, and logs basic request and response information.

        Parameters
        ----------
        request: Request
            Incoming FastAPI `Request` object.
        call_next: Callable
            Callable to process the request further down the middleware stack.

        Returns
        -------
        Response
            `Response` generated by the application.

        Raises
        ------
        Exception
            Re-raise any exceptions that occur during request processing.
        """
        request_id = str(uuid.uuid4())[:8]
        client_ip = self._get_client_ip(request)
        user_agent = request.headers.get("user-agent", "Unknown")

        sanitizer = await get_data_sanitizer()

        sanitized_path = sanitizer.sanitize_for_logging(request.url.path)
        sanitized_query = sanitizer.sanitize_for_logging(request.url.query)

        request_context = {
            "client_ip": client_ip,
            "user_agent": user_agent[:100],
            "method": request.method,
            "path": str(sanitized_path),
            "query_params": str(sanitized_query) if request.url.query else None,
        }

        safe_headers = self._get_safe_headers(request.headers)
        if safe_headers:
            request_context.update(
                {"headers": [f"{k}={v}" for k, v in safe_headers.items()]}
            )

        async with RequestContextLogger(request_id=request_id, **request_context):
            logger.info(f"ðŸ”„ Incoming {request.method} request to {sanitized_path} ðŸ”„")

            try:
                response = await call_next(request)
                return response

            except Exception as e:
                raise e

    def _get_client_ip(self, request: Request) -> str:
        """Extract the client's IP address from request headers or client information.

        Prioritizes 'X-Forwarded-For', then 'X-Real-IP', and finally the direct client host.

        Parameters
        ----------
        request: Request
            Incoming FastAPI `Request` object.

        Returns
        -------
        str
            Client's IP address as a string, or "unknown" if not found.
        """
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()

        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip

        if request.client:
            return request.client.host

        return "unknown"

    def _get_safe_headers(self, headers) -> dict:
        """Filter out sensitive headers from a dictionary of request headers.

        Sensitive headers (e.g., authorization, cookie) are excluded to prevent
        logging of confidential information.

        Parameters
        ----------
        headers
            Dictionary-like object of request headers.

        Returns
        -------
        dict
            New dictionary containing only the non-sensitive headers.
        """
        sensitive_headers = {
            "authorization",
            "cookie",
            "x-api-key",
            "x-auth-token",
            "x-csrf-token",
            "x-forwarded-for",
            "x-real-ip",
        }

        safe_headers = {}
        for name, value in headers.items():
            if name.lower() not in sensitive_headers:
                safe_headers[name] = value

        return safe_headers
